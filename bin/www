#!/usr/bin/env node
console.time('Start time');

// babel register is to slow...
if(!process.env.API) {
  require('babel-register')({
    presets: ['es2015', 'react']
  });
}

/**
 * Module dependencies.
 */
var PACKAGE = require('../package.json');
var path = require('path');
var debug = require('debug')(PACKAGE.name);
var http = require('http');
var server;
var port = normalizePort(process.env.PORT || '3000');

var isomorphicConfig = require('../webpack/webpack_isomorphic_tools.config.js');

global.IS_DEV = process.env.NODE_ENV !== 'production';
// webpack isomorphic tools will modify `require` for react engine
var WebpackIsomorphicTools = require('webpack-isomorphic-tools');

global.webpackIsomorphicTools = new WebpackIsomorphicTools(isomorphicConfig);


global.webpackIsomorphicTools.development(global.IS_DEV);
global.webpackIsomorphicTools.server(path.join(__dirname, '..'), () => {
    var app = require('../server/app');

    /**
     * Get port from environment and store in Express.
     */
    app.set('port', port);

    /**
     * Create HTTP server.
     */
    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);

    server.on('error', onError);
    server.on('listening', onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.timeEnd('Start time');
}